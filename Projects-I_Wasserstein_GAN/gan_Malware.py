# -*- coding: utf-8 -*-
import numpy as np
import argparse
import models
from util import data


def make_parser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='Commands')

    # train
    train_parser = subparsers.add_parser('train', help='Train model')
    train_parser.set_defaults(func=train)

    train_parser.add_argument('--dataset', default='malware_clean_data') #mnist
    train_parser.add_argument('--model', default='wdcgan')
    train_parser.add_argument('-e', '--epochs', type=int, default=200)
    train_parser.add_argument('-l', '--logdir', default='logs/mnist-run')
    train_parser.add_argument('--lr', type=float, default=5e-5)
    train_parser.add_argument('--c', type=float, default=1e-2)
    train_parser.add_argument('--n-critic', type=int, default=5)
    train_parser.add_argument('--n-batch', type=int, default=32)
    train_parser.add_argument('--same_train_data', type=bool, default=True)

    return parser

def train(args):

    #load dataset
    if args.dataset == 'mnist':
        n_dim, n_out, n_channels = 28, 10, 1
        X_train, y_train, X_val, y_val, _, _ = data.load_mnist()

    elif args.dataset == 'random':
        n_dim, n_out, n_channels = 2, 2, 1
        X_train, y_train = data.load_noise(n=1000, d=n_dim)
        X_val, y_val = X_train, y_train

    #可扩展
    elif args.dataset == 'malware_clean_data':
        n_dim, n_channels = 64, 1
        xtrain_mal, ytrain_mal, xtrain_ben, ytrain_ben, xtest_mal, ytest_mal, xtest_ben, ytest_ben = data.load_Malware_clean_ApkToImage()
        if args.same_train_data:
            X_train, y_train, X_val, y_val = xtrain_mal, ytrain_mal, xtrain_ben, ytrain_ben
    else:
        raise ValueError('Invalid dataset name: %s' % args.dataset)

    # set up optimization params
    opt_params = {'lr': args.lr, 'c': args.c, 'n_critic': args.n_critic}

    # create model
    if args.model == 'dcgan':
        model = models.DCGAN(n_dim=n_dim, n_chan=n_channels, opt_params=opt_params)
    elif args.model == 'wdcgan':
        model = models.WDCGAN(n_dim=n_dim, n_chan=n_channels, opt_params=opt_params)
    else:
        raise ValueError('Invalid model')

    # train model

    model.fit(X_train, y_train, X_val, y_val,
              n_epoch=args.epochs, n_batch=args.n_batch,
              logdir=args.logdir)


def main():
  parser = make_parser()
  #load args
  args = parser.parse_args()
  #train
  args.func(args)

if __name__ == '__main__':
  main()